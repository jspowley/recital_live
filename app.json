[{"name":"app.R","content":"library(shiny)\r\nlibrary(jsonlite)\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Recital Entry Form\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      helpText(\"Paste previously saved JSON session data below to restore:\"),\r\n      textAreaInput(\"load_state_text\", \"Paste JSON Session\", \"\", rows = 5),\r\n      actionButton(\"load_state\", \"Load Session\"),\r\n      downloadButton(\"save_state\", \"Download Session (.json)\"),\r\n      textInput(\"teacher\", \"Teacher Name\"),\r\n      textInput(\"first_name\", \"First Name\"),\r\n      textInput(\"last_name\", \"Last Name\"),\r\n      actionButton(\"add_song\", \"Add Song\"),\r\n      actionButton(\"remove_song\", \"Remove Song\"),\r\n      uiOutput(\"song_inputs\"),\r\n      textAreaInput(\"award_comment\", \"Award Comment\", \"\"),\r\n      actionButton(\"finalize\", \"Add Performer\")\r\n    ),\r\n    mainPanel(\r\n      uiOutput(\"cards\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  rv <- reactiveValues(\r\n    entries = list(),\r\n    song_count = 1,\r\n    edit_index = NULL,\r\n    song_inputs_backup = NULL\r\n  )\r\n  \r\n  save_current_song_inputs <- function() {\r\n    rv$song_inputs_backup <- lapply(seq_len(rv$song_count), function(i) {\r\n      list(\r\n        Piece = input[[paste0(\"piece_\", i)]],\r\n        Composer = input[[paste0(\"composer_\", i)]],\r\n        Arranger = input[[paste0(\"arranger_\", i)]],\r\n        Length = input[[paste0(\"length_\", i)]],\r\n        Directions = input[[paste0(\"directions_\", i)]]\r\n      )\r\n    })\r\n  }\r\n  \r\n  output$song_inputs <- renderUI({\r\n    lapply(seq_len(rv$song_count), function(i) {\r\n      piece_val <- if (!is.null(rv$song_inputs_backup) && i <= length(rv$song_inputs_backup)) rv$song_inputs_backup[[i]]$Piece else \"\"\r\n      composer_val <- if (!is.null(rv$song_inputs_backup) && i <= length(rv$song_inputs_backup)) rv$song_inputs_backup[[i]]$Composer else \"\"\r\n      arranger_val <- if (!is.null(rv$song_inputs_backup) && i <= length(rv$song_inputs_backup)) rv$song_inputs_backup[[i]]$Arranger else \"\"\r\n      length_val <- if (!is.null(rv$song_inputs_backup) && i <= length(rv$song_inputs_backup)) rv$song_inputs_backup[[i]]$Length else NA\r\n      directions_val <- if (!is.null(rv$song_inputs_backup) && i <= length(rv$song_inputs_backup)) rv$song_inputs_backup[[i]]$Directions else \"\"\r\n      \r\n      tagList(\r\n        textInput(paste0(\"piece_\", i), paste(\"Piece\", i), value = piece_val),\r\n        textInput(paste0(\"composer_\", i), \"Composer\", value = composer_val),\r\n        textInput(paste0(\"arranger_\", i), \"Arranger\", value = arranger_val),\r\n        numericInput(paste0(\"length_\", i), \"Length\", value = length_val),\r\n        textInput(paste0(\"directions_\", i), \"Directions\", value = directions_val)\r\n      )\r\n    })\r\n  })\r\n  \r\n  observeEvent(input$add_song, {\r\n    if (rv$song_count < 3) {\r\n      save_current_song_inputs()\r\n      rv$song_count <- rv$song_count + 1\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$remove_song, {\r\n    if (rv$song_count > 1) rv$song_count <- rv$song_count - 1\r\n  })\r\n  \r\n  observeEvent(input$finalize, {\r\n    new_entry <- list(\r\n      Teacher = input$teacher,\r\n      First_Name = input$first_name,\r\n      Last_Name = input$last_name,\r\n      Award_Comment = input$award_comment,\r\n      Songs = lapply(seq_len(rv$song_count), function(i) {\r\n        list(\r\n          Piece = input[[paste0(\"piece_\", i)]],\r\n          Composer = input[[paste0(\"composer_\", i)]],\r\n          Arranger = input[[paste0(\"arranger_\", i)]],\r\n          Length = input[[paste0(\"length_\", i)]],\r\n          Directions = input[[paste0(\"directions_\", i)]]\r\n        )\r\n      })\r\n    )\r\n    \r\n    if (!is.null(rv$edit_index)) {\r\n      rv$entries[[rv$edit_index]] <- new_entry\r\n      rv$edit_index <- NULL\r\n    } else {\r\n      rv$entries <- append(rv$entries, list(new_entry))\r\n    }\r\n    \r\n    updateTextInput(session, \"first_name\", value = \"\")\r\n    updateTextInput(session, \"last_name\", value = \"\")\r\n    updateTextAreaInput(session, \"award_comment\", value = \"\")\r\n    for (i in 1:3) {\r\n      updateTextInput(session, paste0(\"piece_\", i), value = \"\")\r\n      updateTextInput(session, paste0(\"composer_\", i), value = \"\")\r\n      updateTextInput(session, paste0(\"arranger_\", i), value = \"\")\r\n      updateNumericInput(session, paste0(\"length_\", i), value = NA)\r\n      updateTextInput(session, paste0(\"directions_\", i), value = \"\")\r\n    }\r\n    \r\n    rv$song_count <- 1\r\n    rv$song_inputs_backup <- NULL\r\n  })\r\n  \r\n  output$cards <- renderUI({\r\n    lapply(seq_along(rv$entries), function(i) {\r\n      performer <- rv$entries[[i]]\r\n      wellPanel(\r\n        h4(paste(performer$First_Name, performer$Last_Name)),\r\n        p(strong(\"Teacher:\"), performer$Teacher),\r\n        lapply(seq_along(performer$Songs), function(j) {\r\n          song <- performer$Songs[[j]]\r\n          tagList(\r\n            h5(paste(\"Song\", j)),\r\n            p(strong(\"Title:\"), song$Piece),\r\n            p(strong(\"Composer:\"), song$Composer),\r\n            p(strong(\"Arranger:\"), song$Arranger),\r\n            p(strong(\"Length:\"), song$Length),\r\n            p(strong(\"Directions:\"), song$Directions)\r\n          )\r\n        }),\r\n        p(strong(\"Award Comment:\"), performer$Award_Comment),\r\n        fluidRow(\r\n          column(3, actionButton(paste0(\"edit_\", i), \"Edit\")),\r\n          column(3, actionButton(paste0(\"delete_\", i), \"Delete\")),\r\n          column(3, actionButton(paste0(\"up_\", i), \"Move Up\")),\r\n          column(3, actionButton(paste0(\"down_\", i), \"Move Down\"))\r\n        )\r\n      )\r\n    })\r\n  })\r\n  \r\n  for (i in 1:100) {\r\n    local({\r\n      ii <- i\r\n      \r\n      observeEvent(input[[paste0(\"delete_\", ii)]], {\r\n        if (ii <= length(rv$entries)) {\r\n          rv$entries <- rv$entries[-ii]\r\n        }\r\n      }, ignoreInit = TRUE)\r\n      \r\n      observeEvent(input[[paste0(\"edit_\", ii)]], {\r\n        if (ii <= length(rv$entries)) {\r\n          performer <- rv$entries[[ii]]\r\n          rv$edit_index <- ii\r\n          updateTextInput(session, \"teacher\", value = performer$Teacher)\r\n          updateTextInput(session, \"first_name\", value = performer$First_Name)\r\n          updateTextInput(session, \"last_name\", value = performer$Last_Name)\r\n          updateTextAreaInput(session, \"award_comment\", value = performer$Award_Comment)\r\n          rv$song_count <- length(performer$Songs)\r\n          rv$song_inputs_backup <- performer$Songs\r\n        }\r\n      }, ignoreInit = TRUE)\r\n      \r\n      observeEvent(input[[paste0(\"up_\", ii)]], {\r\n        isolate({\r\n          if (ii > 1 && ii <= length(rv$entries)) {\r\n            tmp <- rv$entries\r\n            tmp[c(ii - 1, ii)] <- tmp[c(ii, ii - 1)]\r\n            rv$entries <- tmp\r\n          }\r\n        })\r\n      }, ignoreInit = TRUE)\r\n      \r\n      observeEvent(input[[paste0(\"down_\", ii)]], {\r\n        isolate({\r\n          if (ii < length(rv$entries)) {\r\n            tmp <- rv$entries\r\n            tmp[c(ii, ii + 1)] <- tmp[c(ii + 1, ii)]\r\n            rv$entries <- tmp\r\n          }\r\n        })\r\n      }, ignoreInit = TRUE)\r\n    })\r\n  }\r\n  \r\n  output$save_state <- downloadHandler(\r\n    filename = function() paste0(\"recital_session_\", Sys.Date(), \".json\"),\r\n    content = function(file) {\r\n      write_json(rv$entries, path = file, auto_unbox = TRUE, pretty = TRUE)\r\n    }\r\n  )\r\n  \r\n  observeEvent(input$load_state, {\r\n    try({\r\n      new_entries <- fromJSON(input$load_state_text, simplifyVector = FALSE)\r\n      if (is.list(new_entries) && all(sapply(new_entries, function(x) is.list(x) && !is.null(x$First_Name)))) {\r\n        rv$entries <- new_entries\r\n        showNotification(\"Session loaded successfully!\", type = \"message\")\r\n      } else {\r\n        showNotification(\"Invalid JSON structure.\", type = \"error\")\r\n      }\r\n    }, silent = TRUE)\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
